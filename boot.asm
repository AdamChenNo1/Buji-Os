    org 0x7c00 ;将程序的起始地址设臂在Ox7c00处

BaseOfStack equ 0x7c00 ;将标识符BaseOfStack等价为数值Ox7c00，用于为栈指针寄存器SP提供栈基址

Label_Start:
    mov ax,cs
    mov ds,ax
    mov ds,ax
    mov es,ax
    mov ss,ax
    mov sp,BaseOfStack

;清屏——利用0x06号功能,上卷全部行,则可清屏｡
; -----------------------------------------------------------
;INT 0x10 功能号:0x06 功能描述:上卷窗口
; -----------------------------------------------------------
;输入:
;AH 功能号= 0x06
;AL = 上卷的行数(如果为0,表示清屏)，在使用清屏功能时 (AL寄存器为0) ，其他BX EX DX寄存器参数将不起作用
;BH = 上卷后空出的位置放置的属性
;(CL,CH) = 上卷范围的左上角的(X,Y)位置
;(DL,DH) = 上卷范围右下角的(X,Y)位置
    mov ax,0600h
    mov bx,0700h
    mov cx,0        ; 左上角: (0, 0)
    mov dx,0184fh   ; 右下角: (80,25),
                    ; VGA 文本模式中,一行只能容纳80个字符,共25行｡
                    ; 下标从0 开始,所以0x18=24,0x4f=79
    int 10h

;================set focus
;设置光标位置——利用BIOS中断服务程序INT 10h的主功能号AH=02h可实现屏幕光标位置的设置
; -----------------------------------------------------------
;行号和列号皆从0开始计数，屏幕的列坐标0点和行坐标0点位于屏幕的左上角，纵、横坐标分别向下和向右两个方向延伸
; -----------------------------------------------------------
;INT 0x10 功能号:AH = 0x02 功能描述:设定光标位置
; -----------------------------------------------------------
;输入:
;AH 功能号= 0x02
;DH = 游标的列数
;DL = 游标的行数
;BH = 页码
    mov ax,0200h
    mov bx,0000h
    mov dx,0000h
    int 10h

;================display on screen:Start Booting...
;显示字符串——利用BIOS中断服务程序INT 10h的主功能号AH=13h可实现字符串的显示功能
; -----------------------------------------------------------
;INT 0x10 功能号:AH = 0x13 功能描述:显示一行字符串。
; -----------------------------------------------------------
;输入:
;AL 写入模式
    ;AL = 00h: 字符串的属性由BL寄存器提供，而CX寄存器提供字符串长度（以B为单位），显示后光标不变，即显示前的光标位置
    ;AL = 01h: 同AL = 00h,但光标会移动至字符串末尾位置
    ;AL = 02h: 字符串属性由每个字符后面紧跟的字节提供，故CX寄存器提供的字符串长度改成以Word为单位，显示后光标位置不变
    ;AL = 03h: 同AL = 02h,但光标会移动至字符串末尾位置
;CX = 字符串的长度。
;DH = 游标的坐标行号
;DL = 游标的坐标列号
;ES:BP = 要显示字符串的内存地址
;BH = 页码
;BL = 字符属性/颜色属性
    ;bit 0~2: 字体颜色（0:黑，1:蓝，2:绿，3:青，4:红，5:紫，6:棕，7:白）
    ;bit 3: 字体亮度（0:字体正常，1:字体高亮度）
    ;bit 4~6: 背景颜色（0:黑，1:蓝，2:绿，3:青，4:红，5:紫，6:棕，7:白）
    ;bit 7: 字体闪烁（0:不闪烁，1:字体闪烁）

    mov ax,1301h            ;子功能号13 显示字符及属性,要存入ah 寄存器,al 设置写字符方式 ah=01: 显示字符串,光标跟随移动
    mov bx,000fh            ; bh 存储要显示的页号,此处是第0 页,; bl 中是字符属性,属性黑底绿字(bl = 0fh)
    mov dx,0000h
    mov cx,10               ; cx 为串长度,不包括结束符0 的字符个数
    push ax
    mov ax,ds
    mov es,ax
    pop ax
    mov bp,StartBootMessage ; es:bp 为串首地址,es 此时同cs 一致,
    int 10h

;================reset floppy
;    xor ah,ah
;    xor dl,dl
;    int 13h

;    jmp $

StartBootMessage: db "Start Boot" ;定义一个字符串"Start Boot"，并取名为StartBootMessage,

;================fill zero until whole sector

    times 510- ( $ - $$ ) db 0 ;$-$$的意思是，将当前行被编译后的地址（机器码地址）减去本节 (Section) 程序的起始地址。
                               ;由于Boot引导程序只有一个以 Ox7c00 为起始地址的节，那么表达式$-$$的作用是计算出当前程序生成的机器码
                               ;长度，进而可知引导扇区必须填充的数据长度 (510 - ($ - $$)）。又因为软盘是个块设备，访问
                               ;块设备的特点是每次必须以扇区为单位 (512 B) ，而times伪指令恰好可以实现多次重复操作，所以这
                               ;行汇编代码的目的是，通过times 伪指令填充引导扇区剩余空间，以保证生成的文件大小为512B
    dw 0xaa55 ;引导扇区是以 0x55 0xaa 两个字节作为结尾，由于Intel处理器是以小端模式存储数据，那么用一个字表示 0x55、0xaa就应该是Oxaa55, 这样它在扇区里的存储顺序才是0x55 0xaa



